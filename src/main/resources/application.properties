# General
server.port=8086

logging.level.com.fleet.telemetry.driver=ERROR
logging.level.org.springframework.web=ERROR

# Actuator
management.server.port=8081
management.server.servlet.context-path=/
management.security.enabled=false
management.metrics.export.prometheus.enabled=true
management.endpoints.web.base-path=/
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.endpoint.metrics.enabled=true
management.endpoint.health.show-details=always
management.info.git.mode=full

# Swagger
swagger.enabled=false

# Spring Cloud AWS tries to autoconfigure CloudFormation (when the app runs in EC2).
cloud.aws.stack.auto=false

# Default acquisition timeout (milliseconds) before error. If -1 will never wait to  acquire before opening a new
# connection in an unbounded fashion. Fallback 45 seconds
reactor.netty.pool.acquireTimeout=20

sqs.fleet.order.tracking.dynamodb.queue.endpoint=http://localhost:4576/queue/DEV_FLEET_ORDER_TRACKING_QUEUE_DYNAMODB
sqs.fleet.worker.availability.queue.endpoint=http://localhost:4576/queue/DEV_FLEET_WORKER_AVAILABILITY_QUEUE
sqs.idp.order.tracking.queue.endpoint=http://localhost:4576/queue/DEV_IDP_ORDER_TRACKING_QUEUE

min.battery.status=20
max.seconds.diff=20
size.to.send.messages.in.batch=10
duration.milis.to.send.messages.in.batch=500
attribute.tenant.type=String
attribute.tenant.name=tenant-identifier

cloud.aws.credentials.accessKey=user
cloud.aws.credentials.secretKey=user
cloud.aws.credentials.instanceProfile=true
cloud.aws.region.static=sa-east-1
